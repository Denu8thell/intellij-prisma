{
  parserClass="org.intellij.sdk.language.parser.PrismaParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Prisma"
  psiImplClassSuffix="Impl"
  psiPackage="org.intellij.sdk.language.psi"
  psiImplPackage="org.intellij.sdk.language.psi.impl"

  elementTypeHolderClass="org.intellij.sdk.language.psi.PrismaTypes"
  elementTypeClass="org.intellij.sdk.language.psi.PrismaElementType"
  tokenTypeClass="org.intellij.sdk.language.psi.PrismaTokenType"

  psiImplUtilClass="org.intellij.sdk.language.psi.impl.PrismaPsiImplUtil"
}

prismaFile ::= block*

block ::= COMMENT | CRLF | configBlock | modelBlock | enumBlock

configBlock ::= configKeyword IDENTIFIER BRACE_L configEntry+ BRACE_R

configKeyword ::= (DATASOURCE_KEYWORD|GENERATOR_KEYWORD)

configEntry ::= IDENTIFIER EQUAL value

modelBlock ::= MODEL_KEYWORD IDENTIFIER BRACE_L modelEntry+ BRACE_R

modelEntry ::= (IDENTIFIER type inlineAttribute*) | blockAttribute

type ::= nullableType | listType | typeName

typeName ::= IDENTIFIER

listType ::= typeName BRACKET_L BRACKET_R

nullableType ::= typeName QUESTION_MARK

inlineAttribute ::= INLINE_ATTRIBUTE_NAME (PAREN_L parameterList? PAREN_R)?

blockAttribute ::= BLOCK_ATTRIBUTE_NAME PAREN_L parameterList? PAREN_R

parameterList ::= (parameter COMA)* parameter

parameter ::= (IDENTIFIER COLON value) | value

value ::= STRING_LITERAL | NUMBER | BOOLEAN | functionCall | arrayValue | IDENTIFIER

arrayValue ::= BRACKET_L ((value COMA)* value)? BRACKET_R

enumBlock ::= ENUM_KEYWORD IDENTIFIER BRACE_L IDENTIFIER+ BRACE_R

functionCall ::= IDENTIFIER PAREN_L parameterList? PAREN_R
